// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Parallels Desktop DevOps Support",
            "url": "https://forum.parallels.com/",
            "email": "carlos.lapao@parallels.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/health/probe": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns the API Health Probe",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Config"
                ],
                "summary": "Gets the API Health Probe",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    },
                    "402": {
                        "description": "Payment Required",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    }
                }
            }
        },
        "/health/system": {
            "get": {
                "description": "This endpoint returns the API Health Probe",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Config"
                ],
                "summary": "Gets the API System Health",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "Full Health Check",
                        "name": "full",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceHealthCheck"
                        }
                    }
                }
            }
        },
        "/v1/auth/api_keys": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns all the api keys",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Api Keys"
                ],
                "summary": "Gets all the api keys",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ApiKeyResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint creates an api key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Api Keys"
                ],
                "summary": "Creates an api key",
                "parameters": [
                    {
                        "description": "Body",
                        "name": "apiKey",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ApiKeyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ApiKeyResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/auth/api_keys/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns an api key by id or name",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Api Keys"
                ],
                "summary": "Gets an api key by id or name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Api Key ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ApiKeyResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint deletes an api key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Api Keys"
                ],
                "summary": "Deletes an api key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Api Key ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/auth/api_keys/{id}/revoke": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint revokes an api key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Api Keys"
                ],
                "summary": "Revoke an api key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Api Key ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/auth/claims": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns all the claims",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Claims"
                ],
                "summary": "Gets all the claims",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ClaimResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint creates a claim",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Claims"
                ],
                "summary": "Creates a claim",
                "parameters": [
                    {
                        "description": "Claim Request",
                        "name": "claimRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ClaimRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ClaimResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/auth/claims/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns a claim",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Claims"
                ],
                "summary": "Gets a claim",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Claim ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ClaimResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint Deletes a claim",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Claims"
                ],
                "summary": "Delete a claim",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Claim ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/auth/roles": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns all the roles",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Gets all the roles",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.RoleResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns a role",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Gets a role",
                "parameters": [
                    {
                        "description": "Role Request",
                        "name": "roleRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RoleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.RoleResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/auth/roles/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns a role",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Gets a role",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.RoleResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint deletes a role",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Delete a role",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/auth/token": {
            "post": {
                "description": "This endpoint generates a token",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authorization"
                ],
                "summary": "Generates a token",
                "parameters": [
                    {
                        "description": "Body",
                        "name": "login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/auth/token/validate": {
            "post": {
                "description": "This endpoint validates a token",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authorization"
                ],
                "summary": "Validates a token",
                "parameters": [
                    {
                        "description": "Body",
                        "name": "tokenRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ValidateTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ValidateTokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/auth/users": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns all the users",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Gets all the users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ApiUser"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint creates a user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Creates a user",
                "parameters": [
                    {
                        "description": "User",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.ApiUser"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/auth/users/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns a user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Gets a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ApiUser"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint updates a user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update a user",
                "parameters": [
                    {
                        "description": "User",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/models.ApiUser"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint deletes a user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Deletes a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/auth/users/{id}/claims": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns all the claims for a user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Gets all the claims for a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ClaimResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint adds a claim to a user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Adds a claim to a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Claim Name",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ClaimRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.ClaimRequest"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/auth/users/{id}/claims/{claim_id}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint removes a claim from a user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Removes a claim from a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Claim ID",
                        "name": "claim_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/auth/users/{id}/roles": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns all the roles for a user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Gets all the roles for a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.RoleResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint adds a role to a user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Adds a role to a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Role Name",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RoleRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.RoleRequest"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/auth/users/{id}/roles/{role_id}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint removes a role from a user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Removes a role from a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Role ID",
                        "name": "role_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/catalog": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns all the remote catalogs",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Catalogs"
                ],
                "summary": "Gets all the remote catalogs",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.CatalogManifest"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/catalog/cache": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns all the remote catalog cache if any",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Catalogs"
                ],
                "summary": "Gets catalog cache",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.CatalogManifest"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns all the remote catalog cache if any",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Catalogs"
                ],
                "summary": "Deletes all catalog cache",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Catalog ID",
                        "name": "catalogId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/catalog/cache/{catalogId}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns all the remote catalog cache if any",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Catalogs"
                ],
                "summary": "Deletes catalog cache item",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Catalog ID",
                        "name": "catalogId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/catalog/import": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint imports a remote catalog manifest metadata into the catalog inventory",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Catalogs"
                ],
                "summary": "Imports a remote catalog manifest metadata into the catalog inventory",
                "parameters": [
                    {
                        "description": "Pull request",
                        "name": "importRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ImportCatalogManifestRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.ImportCatalogManifestResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/catalog/import-vm": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint imports a virtual machine in pvm or macvm format into the catalog inventory generating the metadata for it",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Catalogs"
                ],
                "summary": "Imports a vm into the catalog inventory generating the metadata for it",
                "parameters": [
                    {
                        "description": "Vm Impoty request",
                        "name": "importRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ImportVmRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.ImportVmResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/catalog/pull": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint pulls a remote catalog manifest",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Catalogs"
                ],
                "summary": "Pull a remote catalog manifest",
                "parameters": [
                    {
                        "description": "Pull request",
                        "name": "pullRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PullCatalogManifestRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.PullCatalogManifestResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/catalog/push": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint pushes a catalog manifest to the catalog inventory",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Catalogs"
                ],
                "summary": "Pushes a catalog manifest to the catalog inventory",
                "parameters": [
                    {
                        "description": "Push request",
                        "name": "pushRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PushCatalogManifestRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.CatalogManifest"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/catalog/{catalogId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns all the remote catalogs",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Catalogs"
                ],
                "summary": "Gets all the remote catalogs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Catalog ID",
                        "name": "catalogId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.CatalogManifest"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint deletes a catalog manifest and all its versions",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Catalogs"
                ],
                "summary": "Deletes a catalog manifest and all its versions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Catalog ID",
                        "name": "catalogId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/catalog/{catalogId}/{version}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns a catalog manifest version",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Catalogs"
                ],
                "summary": "Gets a catalog manifest version",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Catalog ID",
                        "name": "catalogId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Version",
                        "name": "version",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.CatalogManifest"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint deletes a catalog manifest version",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Catalogs"
                ],
                "summary": "Deletes a catalog manifest version",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Catalog ID",
                        "name": "catalogId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Version",
                        "name": "version",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/catalog/{catalogId}/{version}/{architecture}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns a catalog manifest version",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Catalogs"
                ],
                "summary": "Gets a catalog manifest version architecture",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Catalog ID",
                        "name": "catalogId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Version",
                        "name": "version",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Architecture",
                        "name": "architecture",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.CatalogManifest"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint deletes a catalog manifest version",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Catalogs"
                ],
                "summary": "Deletes a catalog manifest version architecture",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Catalog ID",
                        "name": "catalogId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Version",
                        "name": "version",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Architecture",
                        "name": "architecture",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/catalog/{catalogId}/{version}/{architecture}/claims": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint removes claims from a catalog manifest version",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Catalogs"
                ],
                "summary": "Removes claims from a catalog manifest version",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Catalog ID",
                        "name": "catalogId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Version",
                        "name": "version",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Architecture",
                        "name": "architecture",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.VirtualMachineCatalogManifestPatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.CatalogManifest"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint adds claims to a catalog manifest version",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Catalogs"
                ],
                "summary": "Updates a catalog",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Catalog ID",
                        "name": "catalogId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.VirtualMachineCatalogManifestPatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.CatalogManifest"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/catalog/{catalogId}/{version}/{architecture}/download": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint downloads a catalog manifest version",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Catalogs"
                ],
                "summary": "Downloads a catalog manifest version",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Catalog ID",
                        "name": "catalogId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Version",
                        "name": "version",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Architecture",
                        "name": "architecture",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.CatalogManifest"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/catalog/{catalogId}/{version}/{architecture}/revoke": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint UnTaints a catalog manifest version",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Catalogs"
                ],
                "summary": "UnTaints a catalog manifest version",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Catalog ID",
                        "name": "catalogId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Version",
                        "name": "version",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Architecture",
                        "name": "architecture",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.CatalogManifest"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/catalog/{catalogId}/{version}/{architecture}/roles": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint removes roles from a catalog manifest version",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Catalogs"
                ],
                "summary": "Removes roles from a catalog manifest version",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Catalog ID",
                        "name": "catalogId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Version",
                        "name": "version",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Architecture",
                        "name": "architecture",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.VirtualMachineCatalogManifestPatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.CatalogManifest"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint adds roles to a catalog manifest version",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Catalogs"
                ],
                "summary": "Adds roles to a catalog manifest version",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Catalog ID",
                        "name": "catalogId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Version",
                        "name": "version",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Architecture",
                        "name": "architecture",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.VirtualMachineCatalogManifestPatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.CatalogManifest"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/catalog/{catalogId}/{version}/{architecture}/tags": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint removes tags from a catalog manifest version",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Catalogs"
                ],
                "summary": "Removes tags from a catalog manifest version",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Catalog ID",
                        "name": "catalogId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Version",
                        "name": "version",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Architecture",
                        "name": "architecture",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.VirtualMachineCatalogManifestPatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.CatalogManifest"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint adds tags to a catalog manifest version",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Catalogs"
                ],
                "summary": "Adds tags to a catalog manifest version",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Catalog ID",
                        "name": "catalogId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Version",
                        "name": "version",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Architecture",
                        "name": "architecture",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.VirtualMachineCatalogManifestPatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.CatalogManifest"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/catalog/{catalogId}/{version}/{architecture}/taint": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint Taints a catalog manifest version",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Catalogs"
                ],
                "summary": "Taints a catalog manifest version",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Catalog ID",
                        "name": "catalogId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Version",
                        "name": "version",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Architecture",
                        "name": "architecture",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.CatalogManifest"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/catalog/{catalogId}/{version}/{architecture}/untaint": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint UnTaints a catalog manifest version",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Catalogs"
                ],
                "summary": "UnTaints a catalog manifest version",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Catalog ID",
                        "name": "catalogId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Version",
                        "name": "version",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Architecture",
                        "name": "architecture",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.CatalogManifest"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/config/hardware": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns the Hardware Info",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Config"
                ],
                "summary": "Gets the Hardware Info",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.SystemUsageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/config/tools/install": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint installs API requires 3rd party tools",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Config"
                ],
                "summary": "Installs API requires 3rd party tools",
                "parameters": [
                    {
                        "description": "Install Tools Request",
                        "name": "installToolsRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.InstallToolsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.InstallToolsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/config/tools/restart": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint restarts the API Service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Config"
                ],
                "summary": "Restarts the API Service",
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/config/tools/uninstall": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint uninstalls API requires 3rd party tools",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Config"
                ],
                "summary": "Uninstalls API requires 3rd party tools",
                "parameters": [
                    {
                        "description": "Uninstall Tools Request",
                        "name": "uninstallToolsRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UninstallToolsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.InstallToolsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/machines": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns all the virtual machines",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Machines"
                ],
                "summary": "Gets all the virtual machines",
                "parameters": [
                    {
                        "type": "string",
                        "description": "X-Filter",
                        "name": "filter",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.ParallelsVM"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint creates a virtual machine",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Machines"
                ],
                "summary": "Creates a virtual machine",
                "parameters": [
                    {
                        "description": "New Machine Request",
                        "name": "createRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateVirtualMachineRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.CreateVirtualMachineResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/machines/register": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint registers a virtual machine",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Machines"
                ],
                "summary": "Registers a virtual machine",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Machine ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Machine Register Request",
                        "name": "registerRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RegisterVirtualMachineRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.ParallelsVM"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/machines/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns a virtual machine",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Machines"
                ],
                "summary": "Gets a virtual machine",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Machine ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.ParallelsVM"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint deletes a virtual machine",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Machines"
                ],
                "summary": "Deletes a virtual machine",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Machine ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/machines/{id}/clone": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint clones a virtual machine",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Machines"
                ],
                "summary": "Clones a virtual machine",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Machine ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Machine Clone Request",
                        "name": "configRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.VirtualMachineCloneCommandRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.VirtualMachineCloneCommandResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/machines/{id}/execute": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint executes a command on a virtual machine",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Machines"
                ],
                "summary": "Executes a command on a virtual machine",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Machine ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Machine Execute Command Request",
                        "name": "executeRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.VirtualMachineExecuteCommandRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.VirtualMachineExecuteCommandResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/machines/{id}/pause": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint pauses a virtual machine",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Machines"
                ],
                "summary": "Pauses a virtual machine",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Machine ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.VirtualMachineOperationResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/machines/{id}/rename": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint Renames a virtual machine",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Machines"
                ],
                "summary": "Renames a virtual machine",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Machine ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Machine Rename Request",
                        "name": "renameRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RenameVirtualMachineRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.ParallelsVM"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/machines/{id}/reset": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint reset a virtual machine",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Machines"
                ],
                "summary": "Reset a virtual machine",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Machine ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.VirtualMachineOperationResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/machines/{id}/restart": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint restarts a virtual machine",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Machines"
                ],
                "summary": "Restarts a virtual machine",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Machine ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.VirtualMachineOperationResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/machines/{id}/resume": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint resumes a virtual machine",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Machines"
                ],
                "summary": "Resumes a virtual machine",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Machine ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.VirtualMachineOperationResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/machines/{id}/set": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint configures a virtual machine",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Machines"
                ],
                "summary": "Configures a virtual machine",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Machine ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Machine Set Request",
                        "name": "configRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.VirtualMachineConfigRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.VirtualMachineConfigResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/machines/{id}/start": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint starts a virtual machine",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Machines"
                ],
                "summary": "Starts a virtual machine",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Machine ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.VirtualMachineOperationResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/machines/{id}/status": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns the current state of a virtual machine",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Machines"
                ],
                "summary": "Get the current state of a virtual machine",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Machine ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.VirtualMachineStatusResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/machines/{id}/stop": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint stops a virtual machine",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Machines"
                ],
                "summary": "Stops a virtual machine",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Machine ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.VirtualMachineOperationResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/machines/{id}/suspend": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint suspends a virtual machine",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Machines"
                ],
                "summary": "Suspends a virtual machine",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Machine ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.VirtualMachineOperationResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/machines/{id}/unregister": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint unregister a virtual machine",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Machines"
                ],
                "summary": "Unregister a virtual machine",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Machine ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Machine Unregister Request",
                        "name": "unregisterRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UnregisterVirtualMachineRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ApiCommonResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/machines/{id}/upload": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint executes a command on a virtual machine",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Machines"
                ],
                "summary": "Uploads a file to a virtual machine",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Machine ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Machine Upload file Command Request",
                        "name": "executeRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.VirtualMachineUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.VirtualMachineUploadResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/orchestrator/hosts": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns all hosts from the orchestrator",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orchestrator"
                ],
                "summary": "Gets all hosts from the orchestrator",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.OrchestratorHostResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint updates a host in the orchestrator",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orchestrator"
                ],
                "summary": "Update a Host in the orchestrator",
                "parameters": [
                    {
                        "description": "Host Update Request",
                        "name": "hostRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.OrchestratorHostUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.OrchestratorHostResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint register a host in the orchestrator",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orchestrator"
                ],
                "summary": "Register a Host in the orchestrator",
                "parameters": [
                    {
                        "description": "Host Request",
                        "name": "hostRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.OrchestratorHostRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.OrchestratorHostResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/orchestrator/hosts/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns a host from the orchestrator",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orchestrator"
                ],
                "summary": "Gets a host from the orchestrator",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Host ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.OrchestratorHostResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint unregister a host from the orchestrator",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orchestrator"
                ],
                "summary": "Unregister a host from the orchestrator",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Host ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/orchestrator/hosts/{id}/disable": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint will disable an existing host in the orchestrator",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orchestrator"
                ],
                "summary": "Disable a host in the orchestrator",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.OrchestratorHostResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/orchestrator/hosts/{id}/enable": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint will enable an existing host in the orchestrator",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orchestrator"
                ],
                "summary": "Enable a host in the orchestrator",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.OrchestratorHostResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/orchestrator/hosts/{id}/hardware": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns a host hardware info from the orchestrator",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orchestrator"
                ],
                "summary": "Gets a host hardware info from the orchestrator",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Host ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.SystemUsageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/orchestrator/hosts/{id}/machines": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns orchestrator host virtual machines",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orchestrator"
                ],
                "summary": "Get orchestrator host virtual machines",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Host ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.ParallelsVM"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint creates a orchestrator host virtual machine",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orchestrator"
                ],
                "summary": "Creates a orchestrator host virtual machine",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Host ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Create Virtual Machine Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateVirtualMachineRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.CreateVirtualMachineResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/orchestrator/hosts/{id}/machines/register": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint registers a virtual machine in a orchestrator host",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orchestrator"
                ],
                "summary": "Register a virtual machine in a orchestrator host",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Host ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Register Virtual Machine Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RegisterVirtualMachineRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.ParallelsVM"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/orchestrator/hosts/{id}/machines/{vmId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns orchestrator host virtual machine",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orchestrator"
                ],
                "summary": "Get orchestrator host virtual machine",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Host ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Virtual Machine ID",
                        "name": "vmId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.ParallelsVM"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint deletes orchestrator host virtual machine",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orchestrator"
                ],
                "summary": "Deletes orchestrator host virtual machine",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Host ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Virtual Machine ID",
                        "name": "vmId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/orchestrator/hosts/{id}/machines/{vmId}/execute": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint executes a command in a orchestrator host virtual machine",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orchestrator"
                ],
                "summary": "Executes a command in a orchestrator host virtual machine",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Host ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Virtual Machine ID",
                        "name": "vmId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.VirtualMachineConfigResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/orchestrator/hosts/{id}/machines/{vmId}/rename": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint renames orchestrator host virtual machine",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orchestrator"
                ],
                "summary": "Renames orchestrator host virtual machine",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Host ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Virtual Machine ID",
                        "name": "vmId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.ParallelsVM"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/orchestrator/hosts/{id}/machines/{vmId}/set": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint configures orchestrator host virtual machine",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orchestrator"
                ],
                "summary": "Configures orchestrator host virtual machine",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Host ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Virtual Machine ID",
                        "name": "vmId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.VirtualMachineConfigResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/orchestrator/hosts/{id}/machines/{vmId}/start": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint starts orchestrator host virtual machine",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orchestrator"
                ],
                "summary": "Starts orchestrator host virtual machine",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Host ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Virtual Machine ID",
                        "name": "vmId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.VirtualMachineConfigResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/orchestrator/hosts/{id}/machines/{vmId}/status": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns orchestrator host virtual machine status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orchestrator"
                ],
                "summary": "Get orchestrator host virtual machine status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Host ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Virtual Machine ID",
                        "name": "vmId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.ParallelsVM"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/orchestrator/hosts/{id}/machines/{vmId}/stop": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint starts orchestrator host virtual machine",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orchestrator"
                ],
                "summary": "Starts orchestrator host virtual machine",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Host ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Virtual Machine ID",
                        "name": "vmId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.VirtualMachineConfigResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/orchestrator/hosts/{id}/machines/{vmId}/unregister": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint unregister a virtual machine in a orchestrator host",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orchestrator"
                ],
                "summary": "Unregister a virtual machine in a orchestrator host",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Host ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Virtual Machine ID",
                        "name": "vmId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Register Virtual Machine Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UnregisterVirtualMachineRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.ParallelsVM"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/orchestrator/hosts/{id}/reverse-proxy/disable": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint disables orchestrator host reverse proxy",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orchestrator"
                ],
                "summary": "Disables orchestrator host reverse proxy",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Host ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/orchestrator/hosts/{id}/reverse-proxy/enable": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint enables orchestrator host reverse proxy",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orchestrator"
                ],
                "summary": "Enables orchestrator host reverse proxy",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Host ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/orchestrator/hosts/{id}/reverse-proxy/hosts": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns orchestrator host reverse proxy hosts",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orchestrator"
                ],
                "summary": "Gets orchestrator host reverse proxy hosts",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Host ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.ReverseProxyHost"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint creates a orchestrator host reverse proxy host",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orchestrator"
                ],
                "summary": "Creates a orchestrator host reverse proxy host",
                "parameters": [
                    {
                        "description": "Create Host Reverse Proxy Host Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ReverseProxyHostCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.ReverseProxyHost"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/orchestrator/hosts/{id}/reverse-proxy/hosts/{reverse_proxy_host_id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns orchestrator host reverse proxy hosts",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orchestrator"
                ],
                "summary": "Gets orchestrator host reverse proxy hosts",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Host ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.ReverseProxyHost"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint updates an orchestrator host reverse proxy host",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orchestrator"
                ],
                "summary": "Updates an orchestrator host reverse proxy host",
                "parameters": [
                    {
                        "description": "Update Host Reverse Proxy Host Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ReverseProxyHostUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.ReverseProxyHost"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint deletes an orchestrator host reverse proxy host",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orchestrator"
                ],
                "summary": "Deletes an orchestrator host reverse proxy host",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Host ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Reverse Proxy Host ID",
                        "name": "reverse_proxy_host_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/orchestrator/hosts/{id}/reverse-proxy/hosts/{reverse_proxy_host_id}/http_routes": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint upserts an orchestrator host reverse proxy host http route",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orchestrator"
                ],
                "summary": "Upserts an orchestrator host reverse proxy host http route",
                "parameters": [
                    {
                        "description": "Upsert Host Reverse Proxy Host Http Routes Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ReverseProxyHostUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.ReverseProxyHost"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/orchestrator/hosts/{id}/reverse-proxy/hosts/{reverse_proxy_host_id}/http_routes/{route_id}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint deletes an orchestrator host reverse proxy host http route",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orchestrator"
                ],
                "summary": "Deletes an orchestrator host reverse proxy host http route",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Host ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Reverse Proxy Host ID",
                        "name": "reverse_proxy_host_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Route ID",
                        "name": "route_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/orchestrator/hosts/{id}/reverse-proxy/hosts/{reverse_proxy_host_id}/tcp_route": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint updates an orchestrator host reverse proxy host tcp route",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orchestrator"
                ],
                "summary": "Update an orchestrator host reverse proxy host tcp route",
                "parameters": [
                    {
                        "description": "Update Host Reverse Proxy Host tcp Routes Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ReverseProxyHostUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.ReverseProxyHost"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/orchestrator/hosts/{id}/reverse-proxy/restart": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint restarts orchestrator host reverse proxy",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orchestrator"
                ],
                "summary": "Restarts orchestrator host reverse proxy",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Host ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/orchestrator/machines": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns orchestrator Virtual Machines",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orchestrator"
                ],
                "summary": "Get orchestrator Virtual Machines",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.ParallelsVM"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint creates a virtual machine in one of the hosts for the orchestrator",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orchestrator"
                ],
                "summary": "Creates a virtual machine in one of the hosts for the orchestrator",
                "parameters": [
                    {
                        "description": "Create Virtual Machine Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateVirtualMachineRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.CreateVirtualMachineResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/orchestrator/machines/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns orchestrator Virtual Machine by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orchestrator"
                ],
                "summary": "Get orchestrator Virtual Machine",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.ParallelsVM"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint deletes orchestrator virtual machine",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orchestrator"
                ],
                "summary": "Deletes orchestrator virtual machine",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Virtual Machine ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/orchestrator/machines/{id}/rename": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint renames orchestrator virtual machine",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orchestrator"
                ],
                "summary": "Renames orchestrator virtual machine",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Virtual Machine ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.ParallelsVM"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/orchestrator/machines/{vmId}/execute": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint executes a command in a orchestrator virtual machine",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orchestrator"
                ],
                "summary": "Executes a command in a orchestrator virtual machine",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Virtual Machine ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.VirtualMachineConfigResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/orchestrator/machines/{vmId}/set": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint configures orchestrator virtual machine",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orchestrator"
                ],
                "summary": "Configures orchestrator virtual machine",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Virtual Machine ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.VirtualMachineConfigResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/orchestrator/machines/{vmId}/start": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint starts orchestrator virtual machine",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orchestrator"
                ],
                "summary": "Starts orchestrator virtual machine",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Virtual Machine ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.VirtualMachineConfigResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/orchestrator/machines/{vmId}/status": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns orchestrator virtual machine status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orchestrator"
                ],
                "summary": "Get orchestrator virtual machine status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Virtual Machine ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.ParallelsVM"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/orchestrator/machines/{vmId}/stop": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint sops orchestrator virtual machine",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orchestrator"
                ],
                "summary": "Stops orchestrator virtual machine",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Virtual Machine ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.VirtualMachineConfigResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/orchestrator/overview/resources": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns orchestrator resource overview",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orchestrator"
                ],
                "summary": "Get orchestrator resource overview",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.HostResourceOverviewResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/orchestrator/overview/{id}/resources": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns orchestrator host resources",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orchestrator"
                ],
                "summary": "Get orchestrator host resources",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Host ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.HostResourceOverviewResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/parallels_desktop/key": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns Parallels Desktop active license",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Config"
                ],
                "summary": "Gets Parallels Desktop active license",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ParallelsDesktopLicense"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/reverse-proxy": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns the reverse proxy configuration",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ReverseProxy"
                ],
                "summary": "Gets reverse proxy configuration",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.ReverseProxy"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/reverse-proxy/disable": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint will disable the reverse proxy",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ReverseProxy"
                ],
                "summary": "Disable the reverse proxy",
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/reverse-proxy/enable": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint will enable the reverse proxy",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ReverseProxy"
                ],
                "summary": "Enable the reverse proxy",
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/reverse-proxy/hosts": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns all the reverse proxy hosts",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ReverseProxy"
                ],
                "summary": "Gets all the reverse proxy hosts",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.ReverseProxyHost"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint creates a reverse proxy host",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ReverseProxy"
                ],
                "summary": "Creates a reverse proxy host",
                "parameters": [
                    {
                        "description": "Reverse Host Request",
                        "name": "reverse_proxy_create_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ReverseProxyHostCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.ReverseProxyHost"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/reverse-proxy/hosts/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns a reverse proxy host",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ReverseProxy"
                ],
                "summary": "Gets all the reverse proxy host",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Reverse Proxy Host ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.ReverseProxyHost"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint creates a reverse proxy host",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ReverseProxy"
                ],
                "summary": "Updates a reverse proxy host",
                "parameters": [
                    {
                        "description": "Reverse Host Request",
                        "name": "reverse_proxy_update_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ReverseProxyHostUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.ReverseProxyHost"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint Deletes a reverse proxy host",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ReverseProxy"
                ],
                "summary": "Delete a a reverse proxy host",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Reverse Proxy Host ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/reverse-proxy/hosts/{id}/http_route": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint creates or updates a reverse proxy host HTTP route",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ReverseProxy"
                ],
                "summary": "Creates or updates a reverse proxy host HTTP route",
                "parameters": [
                    {
                        "description": "Reverse Host Request",
                        "name": "reverse_proxy_http_route_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ReverseProxyHostHttpRouteCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.ReverseProxyHost"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/reverse-proxy/hosts/{id}/http_routes": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint updates a reverse proxy host TCP route",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ReverseProxy"
                ],
                "summary": "Updates a reverse proxy host TCP route",
                "parameters": [
                    {
                        "description": "Reverse Host Request",
                        "name": "reverse_proxy_tcp_route_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ReverseProxyHostTcpRouteCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.ReverseProxyHost"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/reverse-proxy/hosts/{id}/http_routes/{http_route_id}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint Deletes a reverse proxy host HTTP route",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ReverseProxy"
                ],
                "summary": "Delete a a reverse proxy host HTTP route",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Reverse Proxy Host ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Reverse Proxy Host HTTP Route ID",
                        "name": "http_route_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/reverse-proxy/restart": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint will restart the reverse proxy",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ReverseProxy"
                ],
                "summary": "Restarts the reverse proxy",
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/templates/packer": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns all the packer templates",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Packer Templates"
                ],
                "summary": "Gets all the packer templates",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.PackerTemplateResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint creates a packer template",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Packer Templates"
                ],
                "summary": "Creates a packer template",
                "parameters": [
                    {
                        "description": "Create Packer Template Request",
                        "name": "createPackerTemplateRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreatePackerTemplateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.PackerTemplateResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/templates/packer/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns a packer template",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Packer Templates"
                ],
                "summary": "Gets a packer template",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Packer Template ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.PackerTemplateResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint updates a packer template",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Packer Templates"
                ],
                "summary": "Updates a packer template",
                "parameters": [
                    {
                        "description": "Update Packer Template Request",
                        "name": "createPackerTemplateRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreatePackerTemplateRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Packer Template ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.PackerTemplateResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint deletes a packer template",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Packer Templates"
                ],
                "summary": "Deletes a packer template",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Packer Template ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ApiErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.OAuthErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "github_com_Parallels_prl-devops-service_catalog_models.MinimumSpecRequirement": {
            "type": "object",
            "properties": {
                "cpu": {
                    "type": "integer"
                },
                "disk": {
                    "type": "integer"
                },
                "memory": {
                    "type": "integer"
                }
            }
        },
        "github_com_Parallels_prl-devops-service_models.Advanced": {
            "type": "object",
            "properties": {
                "Public SSH keys synchronization": {
                    "type": "string"
                },
                "Rosetta Linux": {
                    "type": "string"
                },
                "Share host location": {
                    "type": "string"
                },
                "Show developer tools": {
                    "type": "string"
                },
                "Swipe from edges": {
                    "type": "string"
                },
                "VM hostname synchronization": {
                    "type": "string"
                }
            }
        },
        "github_com_Parallels_prl-devops-service_models.CPU": {
            "type": "object",
            "properties": {
                "VT-x": {
                    "type": "boolean"
                },
                "accl": {
                    "type": "string"
                },
                "auto": {
                    "type": "string"
                },
                "cpus": {
                    "type": "integer"
                },
                "hotplug": {
                    "type": "boolean"
                },
                "mode": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "github_com_Parallels_prl-devops-service_models.CatalogManifest": {
            "type": "object",
            "properties": {
                "architecture": {
                    "type": "string"
                },
                "catalog_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "download_count": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "is_compressed": {
                    "type": "boolean"
                },
                "last_downloaded_at": {
                    "type": "string"
                },
                "last_downloaded_user": {
                    "type": "string"
                },
                "metadata_filename": {
                    "type": "string"
                },
                "minimum_requirements": {
                    "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.MinimumSpecRequirement"
                },
                "name": {
                    "type": "string"
                },
                "pack_contents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.CatalogManifestPackItem"
                    }
                },
                "pack_filename": {
                    "type": "string"
                },
                "pack_relative_path": {
                    "type": "string"
                },
                "pack_size": {
                    "type": "integer"
                },
                "path": {
                    "type": "string"
                },
                "provider": {
                    "$ref": "#/definitions/models.RemoteVirtualMachineProvider"
                },
                "required_claims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "required_roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "revoked": {
                    "type": "boolean"
                },
                "revoked_at": {
                    "type": "string"
                },
                "revoked_by": {
                    "type": "string"
                },
                "size": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tainted": {
                    "type": "boolean"
                },
                "tainted_at": {
                    "type": "string"
                },
                "tainted_by": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "untainted_by": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "github_com_Parallels_prl-devops-service_models.Cdrom0": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "image": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                }
            }
        },
        "github_com_Parallels_prl-devops-service_models.Coherence": {
            "type": "object",
            "properties": {
                "Auto-switch to full screen": {
                    "type": "string"
                },
                "Disable aero": {
                    "type": "string"
                },
                "Hide minimized windows": {
                    "type": "string"
                },
                "Show Windows systray in Mac menu": {
                    "type": "string"
                }
            }
        },
        "github_com_Parallels_prl-devops-service_models.Expiration": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            }
        },
        "github_com_Parallels_prl-devops-service_models.Fullscreen": {
            "type": "object",
            "properties": {
                "Activate spaces on click": {
                    "type": "string"
                },
                "Gamma control": {
                    "type": "string"
                },
                "Optimize for games": {
                    "type": "string"
                },
                "Scale view mode": {
                    "type": "string"
                },
                "Use all displays": {
                    "type": "string"
                }
            }
        },
        "github_com_Parallels_prl-devops-service_models.GuestSharedFolders": {
            "type": "object",
            "properties": {
                "Automount": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            }
        },
        "github_com_Parallels_prl-devops-service_models.GuestTools": {
            "type": "object",
            "properties": {
                "state": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "github_com_Parallels_prl-devops-service_models.Hardware": {
            "type": "object",
            "properties": {
                "cdrom0": {
                    "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.Cdrom0"
                },
                "cpu": {
                    "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.CPU"
                },
                "hdd0": {
                    "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.Hdd0"
                },
                "memory": {
                    "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.Memory"
                },
                "memory_quota": {
                    "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.MemoryQuota"
                },
                "net0": {
                    "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.Net0"
                },
                "sound0": {
                    "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.Sound0"
                },
                "usb": {
                    "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.Expiration"
                },
                "video": {
                    "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.Video"
                }
            }
        },
        "github_com_Parallels_prl-devops-service_models.Hdd0": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "image": {
                    "type": "string"
                },
                "online-compact": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                },
                "size": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "github_com_Parallels_prl-devops-service_models.HostResourceItem": {
            "type": "object",
            "properties": {
                "disk_size": {
                    "type": "number"
                },
                "free_disk_size": {
                    "type": "number"
                },
                "logical_cpu_count": {
                    "type": "integer"
                },
                "memory_size": {
                    "type": "number"
                },
                "physical_cpu_count": {
                    "type": "integer"
                },
                "total_apple_vms": {
                    "type": "integer"
                }
            }
        },
        "github_com_Parallels_prl-devops-service_models.HostReverseProxy": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "host": {
                    "type": "string"
                },
                "hosts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.ReverseProxyHost"
                    }
                },
                "port": {
                    "type": "string"
                }
            }
        },
        "github_com_Parallels_prl-devops-service_models.ImportCatalogManifestResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "github_com_Parallels_prl-devops-service_models.ImportVmResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "github_com_Parallels_prl-devops-service_models.Memory": {
            "type": "object",
            "properties": {
                "auto": {
                    "type": "string"
                },
                "hotplug": {
                    "type": "boolean"
                },
                "size": {
                    "type": "string"
                }
            }
        },
        "github_com_Parallels_prl-devops-service_models.MemoryQuota": {
            "type": "object",
            "properties": {
                "auto": {
                    "type": "string"
                }
            }
        },
        "github_com_Parallels_prl-devops-service_models.MinimumSpecRequirement": {
            "type": "object",
            "properties": {
                "cpu": {
                    "type": "integer"
                },
                "disk": {
                    "type": "integer"
                },
                "memory": {
                    "type": "integer"
                }
            }
        },
        "github_com_Parallels_prl-devops-service_models.MiscellaneousSharing": {
            "type": "object",
            "properties": {
                "Shared clipboard": {
                    "type": "string"
                },
                "Shared cloud": {
                    "type": "string"
                }
            }
        },
        "github_com_Parallels_prl-devops-service_models.Modality": {
            "type": "object",
            "properties": {
                "Capture mouse clicks": {
                    "type": "string"
                },
                "Opacity (percentage)": {
                    "type": "integer"
                },
                "Show on all spaces": {
                    "type": "string"
                },
                "Stay on top": {
                    "type": "string"
                }
            }
        },
        "github_com_Parallels_prl-devops-service_models.MouseAndKeyboard": {
            "type": "object",
            "properties": {
                "Keyboard optimization mode": {
                    "type": "string"
                },
                "Smart mouse optimized for games": {
                    "type": "string"
                },
                "Smooth scrolling": {
                    "type": "string"
                },
                "Sticky mouse": {
                    "type": "string"
                }
            }
        },
        "github_com_Parallels_prl-devops-service_models.Net0": {
            "type": "object",
            "properties": {
                "card": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "mac": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "github_com_Parallels_prl-devops-service_models.Optimization": {
            "type": "object",
            "properties": {
                "Adaptive hypervisor": {
                    "type": "string"
                },
                "Auto compress virtual disks": {
                    "type": "string"
                },
                "Disabled Windows logo": {
                    "type": "string"
                },
                "Faster virtual machine": {
                    "type": "string"
                },
                "Hypervisor type": {
                    "type": "string"
                },
                "Longer battery life": {
                    "type": "string"
                },
                "Nested virtualization": {
                    "type": "string"
                },
                "PMU virtualization": {
                    "type": "string"
                },
                "Resource quota": {
                    "type": "string"
                },
                "Show battery status": {
                    "type": "string"
                }
            }
        },
        "github_com_Parallels_prl-devops-service_models.ParallelsVM": {
            "type": "object",
            "properties": {
                "Advanced": {
                    "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.Advanced"
                },
                "Allow select boot device": {
                    "type": "string"
                },
                "BIOS type": {
                    "type": "string"
                },
                "Boot order": {
                    "type": "string"
                },
                "Coherence": {
                    "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.Coherence"
                },
                "Description": {
                    "type": "string"
                },
                "EFI Secure boot": {
                    "type": "string"
                },
                "Expiration": {
                    "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.Expiration"
                },
                "External boot device": {
                    "type": "string"
                },
                "Fullscreen": {
                    "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.Fullscreen"
                },
                "Guest Shared Folders": {
                    "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.GuestSharedFolders"
                },
                "GuestTools": {
                    "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.GuestTools"
                },
                "Hardware": {
                    "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.Hardware"
                },
                "Home": {
                    "type": "string"
                },
                "Home path": {
                    "type": "string"
                },
                "Host Shared Folders": {
                    "type": "object",
                    "additionalProperties": true
                },
                "Host defined sharing": {
                    "type": "string"
                },
                "ID": {
                    "type": "string"
                },
                "Miscellaneous Sharing": {
                    "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.MiscellaneousSharing"
                },
                "Modality": {
                    "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.Modality"
                },
                "Mouse and Keyboard": {
                    "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.MouseAndKeyboard"
                },
                "Name": {
                    "type": "string"
                },
                "Network": {
                    "$ref": "#/definitions/models.NetworkInformation"
                },
                "OS": {
                    "type": "string"
                },
                "Optimization": {
                    "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.Optimization"
                },
                "Print Management": {
                    "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.PrintManagement"
                },
                "Restore Image": {
                    "type": "string"
                },
                "SMBIOS settings": {
                    "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.SMBIOSSettings"
                },
                "Security": {
                    "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.Security"
                },
                "Shared Applications": {
                    "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.SharedApplications"
                },
                "Shared Profile": {
                    "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.Expiration"
                },
                "Smart Guard": {
                    "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.Expiration"
                },
                "SmartMount": {
                    "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.SmartMount"
                },
                "Startup and Shutdown": {
                    "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.StartupAndShutdown"
                },
                "State": {
                    "type": "string"
                },
                "Template": {
                    "type": "string"
                },
                "Time Synchronization": {
                    "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.TimeSynchronization"
                },
                "Travel mode": {
                    "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.TravelMode"
                },
                "Type": {
                    "type": "string"
                },
                "USB and Bluetooth": {
                    "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.USBAndBluetooth"
                },
                "Uptime": {
                    "type": "string"
                },
                "host": {
                    "type": "string"
                },
                "host_external_ip_address": {
                    "type": "string"
                },
                "host_id": {
                    "type": "string"
                },
                "host_state": {
                    "type": "string"
                },
                "internal_ip_address": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                }
            }
        },
        "github_com_Parallels_prl-devops-service_models.PrintManagement": {
            "type": "object",
            "properties": {
                "Show host printer UI": {
                    "type": "string"
                },
                "Synchronize default printer": {
                    "type": "string"
                },
                "Synchronize with host printers": {
                    "type": "string"
                }
            }
        },
        "github_com_Parallels_prl-devops-service_models.PullCatalogManifestResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "local_path": {
                    "type": "string"
                },
                "machine_id": {
                    "type": "string"
                },
                "machine_name": {
                    "type": "string"
                },
                "manifest": {
                    "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.CatalogManifest"
                }
            }
        },
        "github_com_Parallels_prl-devops-service_models.ReverseProxy": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "host": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                }
            }
        },
        "github_com_Parallels_prl-devops-service_models.ReverseProxyHost": {
            "type": "object",
            "properties": {
                "cors": {
                    "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.ReverseProxyHostCors"
                },
                "host": {
                    "type": "string"
                },
                "http_routes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.ReverseProxyHostHttpRoute"
                    }
                },
                "id": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                },
                "tcp_route": {
                    "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.ReverseProxyHostTcpRoute"
                },
                "tls": {
                    "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.ReverseProxyHostTls"
                }
            }
        },
        "github_com_Parallels_prl-devops-service_models.ReverseProxyHostCors": {
            "type": "object",
            "properties": {
                "allowed_headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "allowed_methods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "allowed_origins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "enabled": {
                    "type": "boolean"
                }
            }
        },
        "github_com_Parallels_prl-devops-service_models.ReverseProxyHostHttpRoute": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "pattern": {
                    "type": "string"
                },
                "request_headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "response_headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "schema": {
                    "type": "string"
                },
                "target_host": {
                    "type": "string"
                },
                "target_port": {
                    "type": "string"
                },
                "target_vm_id": {
                    "type": "string"
                }
            }
        },
        "github_com_Parallels_prl-devops-service_models.ReverseProxyHostTcpRoute": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "target_host": {
                    "type": "string"
                },
                "target_port": {
                    "type": "string"
                },
                "target_vm_id": {
                    "type": "string"
                }
            }
        },
        "github_com_Parallels_prl-devops-service_models.ReverseProxyHostTls": {
            "type": "object",
            "properties": {
                "cert": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "key": {
                    "type": "string"
                }
            }
        },
        "github_com_Parallels_prl-devops-service_models.SMBIOSSettings": {
            "type": "object",
            "properties": {
                "BIOS Version": {
                    "type": "string"
                },
                "Board Manufacturer": {
                    "type": "string"
                },
                "System serial number": {
                    "type": "string"
                }
            }
        },
        "github_com_Parallels_prl-devops-service_models.Security": {
            "type": "object",
            "properties": {
                "Archived": {
                    "type": "string"
                },
                "Configuration is locked": {
                    "type": "string"
                },
                "Custom password protection": {
                    "type": "string"
                },
                "Encrypted": {
                    "type": "string"
                },
                "Packed": {
                    "type": "string"
                },
                "Protected": {
                    "type": "string"
                },
                "TPM enabled": {
                    "type": "string"
                },
                "TPM type": {
                    "type": "string"
                }
            }
        },
        "github_com_Parallels_prl-devops-service_models.SharedApplications": {
            "type": "object",
            "properties": {
                "Bounce dock icon when app flashes": {
                    "type": "string"
                },
                "Guest-to-host apps sharing": {
                    "type": "string"
                },
                "Host-to-guest apps sharing": {
                    "type": "string"
                },
                "Show guest apps folder in Dock": {
                    "type": "string"
                },
                "Show guest notifications": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            }
        },
        "github_com_Parallels_prl-devops-service_models.SmartMount": {
            "type": "object",
            "properties": {
                "CD/DVD drives": {
                    "type": "string"
                },
                "Network shares": {
                    "type": "string"
                },
                "Removable drives": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            }
        },
        "github_com_Parallels_prl-devops-service_models.Sound0": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "mixer": {
                    "type": "string"
                },
                "output": {
                    "type": "string"
                }
            }
        },
        "github_com_Parallels_prl-devops-service_models.StartupAndShutdown": {
            "type": "object",
            "properties": {
                "Autostart": {
                    "type": "string"
                },
                "Autostart delay": {
                    "type": "integer"
                },
                "Autostop": {
                    "type": "string"
                },
                "On shutdown": {
                    "type": "string"
                },
                "On window close": {
                    "type": "string"
                },
                "Pause idle": {
                    "type": "string"
                },
                "Startup view": {
                    "type": "string"
                },
                "Undo disks": {
                    "type": "string"
                }
            }
        },
        "github_com_Parallels_prl-devops-service_models.TimeSynchronization": {
            "type": "object",
            "properties": {
                "Interval (in seconds)": {
                    "type": "integer"
                },
                "Smart mode": {
                    "type": "string"
                },
                "Timezone synchronization disabled": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            }
        },
        "github_com_Parallels_prl-devops-service_models.TravelMode": {
            "type": "object",
            "properties": {
                "Enter condition": {
                    "type": "string"
                },
                "Enter threshold": {
                    "type": "integer"
                },
                "Quit condition": {
                    "type": "string"
                }
            }
        },
        "github_com_Parallels_prl-devops-service_models.USBAndBluetooth": {
            "type": "object",
            "properties": {
                "Automatic sharing bluetooth": {
                    "type": "string"
                },
                "Automatic sharing cameras": {
                    "type": "string"
                },
                "Automatic sharing gamepads": {
                    "type": "string"
                },
                "Automatic sharing smart cards": {
                    "type": "string"
                },
                "Support USB 3.0": {
                    "type": "string"
                }
            }
        },
        "github_com_Parallels_prl-devops-service_models.Video": {
            "type": "object",
            "properties": {
                "3d-acceleration": {
                    "type": "string"
                },
                "adapter-type": {
                    "type": "string"
                },
                "automatic-video-memory": {
                    "type": "string"
                },
                "high-resolution": {
                    "type": "string"
                },
                "high-resolution-in-guest": {
                    "type": "string"
                },
                "native-scaling-in-guest": {
                    "type": "string"
                },
                "size": {
                    "type": "string"
                },
                "vertical-sync": {
                    "type": "string"
                }
            }
        },
        "models.ApiCommonResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {},
                "error": {},
                "operation": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "models.ApiErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.ApiKeyRequest": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "revoked": {
                    "type": "boolean"
                },
                "revoked_at": {
                    "type": "string"
                },
                "secret": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.ApiKeyResponse": {
            "type": "object",
            "properties": {
                "encoded": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "revoked": {
                    "type": "boolean"
                }
            }
        },
        "models.ApiUser": {
            "type": "object",
            "properties": {
                "claims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "isSuperUser": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.CatalogManifestPackItem": {
            "type": "object",
            "properties": {
                "is_dir": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                }
            }
        },
        "models.ClaimRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "models.ClaimResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.CreateCatalogVirtualMachineRequest": {
            "type": "object",
            "properties": {
                "architecture": {
                    "type": "string"
                },
                "catalog_id": {
                    "type": "string"
                },
                "connection": {
                    "type": "string"
                },
                "machine_name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "provider_metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "specs": {
                    "$ref": "#/definitions/models.CreateVirtualMachineSpecs"
                },
                "start_after_pull": {
                    "type": "boolean"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "models.CreatePackerTemplateRequest": {
            "type": "object",
            "properties": {
                "addons": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "defaults": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "internal": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "packer_folder": {
                    "type": "string"
                },
                "required_claims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "required_roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "specs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "updated_at": {
                    "type": "string"
                },
                "variables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "models.CreatePackerVirtualMachineRequest": {
            "type": "object",
            "properties": {
                "architecture": {
                    "type": "string"
                },
                "desiredState": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "specs": {
                    "$ref": "#/definitions/models.CreateVirtualMachineSpecs"
                },
                "template": {
                    "type": "string"
                }
            }
        },
        "models.CreateVagrantMachineRequest": {
            "type": "object",
            "properties": {
                "architecture": {
                    "type": "string"
                },
                "box": {
                    "type": "string"
                },
                "custom_parallels_config": {
                    "type": "string"
                },
                "custom_vagrant_config": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "specs": {
                    "$ref": "#/definitions/models.CreateVirtualMachineSpecs"
                },
                "vagrant_file_path": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "models.CreateVirtualMachineRequest": {
            "type": "object",
            "properties": {
                "architecture": {
                    "type": "string"
                },
                "catalog_manifest": {
                    "$ref": "#/definitions/models.CreateCatalogVirtualMachineRequest"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "packer_template": {
                    "$ref": "#/definitions/models.CreatePackerVirtualMachineRequest"
                },
                "start_on_create": {
                    "type": "boolean"
                },
                "vagrant_box": {
                    "$ref": "#/definitions/models.CreateVagrantMachineRequest"
                }
            }
        },
        "models.CreateVirtualMachineResponse": {
            "type": "object",
            "properties": {
                "current_state": {
                    "type": "string"
                },
                "host": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                }
            }
        },
        "models.CreateVirtualMachineSpecs": {
            "type": "object",
            "properties": {
                "cpu": {
                    "type": "string"
                },
                "disk": {
                    "type": "string"
                },
                "memory": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "models.HostResourceOverviewResponse": {
            "type": "object",
            "properties": {
                "cpu_brand": {
                    "type": "string"
                },
                "cpu_type": {
                    "type": "string"
                },
                "total": {
                    "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.HostResourceItem"
                },
                "total_available": {
                    "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.HostResourceItem"
                },
                "total_in_use": {
                    "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.HostResourceItem"
                },
                "total_reserved": {
                    "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.HostResourceItem"
                }
            }
        },
        "models.ImportCatalogManifestRequest": {
            "type": "object",
            "properties": {
                "architecture": {
                    "type": "string"
                },
                "catalog_id": {
                    "type": "string"
                },
                "connection": {
                    "type": "string"
                },
                "provider_metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "models.ImportVmRequest": {
            "type": "object",
            "properties": {
                "architecture": {
                    "type": "string"
                },
                "catalog_id": {
                    "type": "string"
                },
                "connection": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "force": {
                    "type": "boolean"
                },
                "is_compressed": {
                    "type": "boolean"
                },
                "machine_remote_path": {
                    "type": "string"
                },
                "provider_metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "required_claims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "required_roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "models.InstallToolsRequest": {
            "type": "object",
            "properties": {
                "all": {
                    "type": "boolean"
                },
                "run_as": {
                    "type": "string"
                },
                "tools": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/models.InstallToolsRequestItem"
                    }
                }
            }
        },
        "models.InstallToolsRequestItem": {
            "type": "object",
            "properties": {
                "flags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "models.InstallToolsResponse": {
            "type": "object",
            "properties": {
                "installed_tools": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/models.InstallToolsResponseItem"
                    }
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "models.InstallToolsResponseItem": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "models.LoginRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "models.LoginResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "expires_at": {
                    "type": "integer"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "models.NetworkInformation": {
            "type": "object",
            "properties": {
                "Conditioned": {
                    "type": "string"
                },
                "Inbound": {
                    "$ref": "#/definitions/models.NetworkInformationBound"
                },
                "Outbound": {
                    "$ref": "#/definitions/models.NetworkInformationBound"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.NetworkInformationIPAddress"
                    }
                }
            }
        },
        "models.NetworkInformationBound": {
            "type": "object",
            "properties": {
                "Bandwidth": {
                    "type": "string"
                },
                "Delay": {
                    "type": "string"
                },
                "Packet Loss": {
                    "type": "string"
                }
            }
        },
        "models.NetworkInformationIPAddress": {
            "type": "object",
            "properties": {
                "ip": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "models.OAuthErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/models.OAuthErrorType"
                },
                "error_description": {
                    "type": "string"
                },
                "error_uri": {
                    "type": "string"
                }
            }
        },
        "models.OAuthErrorType": {
            "type": "integer",
            "enum": [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12
            ],
            "x-enum-varnames": [
                "OAuthInvalidRequestError",
                "OAuthInvalidClientError",
                "OAuthInvalidGrant",
                "OAuthInvalidScope",
                "OAuthUserExists",
                "OAuthUnauthorizedClient",
                "OAuthUnsupportedGrantType",
                "OAuthPasswordMismatch",
                "OAuthPasswordValidation",
                "OAuthUserValidation",
                "OAuthEmailNotVerified",
                "OAuthUserBlocked",
                "UnknownError"
            ]
        },
        "models.OrchestratorAuthentication": {
            "type": "object",
            "properties": {
                "api_key": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.OrchestratorHostRequest": {
            "type": "object",
            "properties": {
                "authentication": {
                    "$ref": "#/definitions/models.OrchestratorAuthentication"
                },
                "description": {
                    "type": "string"
                },
                "host": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                },
                "prefix": {
                    "type": "string"
                },
                "required_claims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "required_roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "schema": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.OrchestratorHostResponse": {
            "type": "object",
            "properties": {
                "architecture": {
                    "type": "string"
                },
                "cpu_model": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "devops_version": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "external_ip_address": {
                    "type": "string"
                },
                "host": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_reverse_proxy_enabled": {
                    "type": "boolean"
                },
                "os_name": {
                    "type": "string"
                },
                "os_version": {
                    "type": "string"
                },
                "parallels_desktop_licensed": {
                    "type": "boolean"
                },
                "parallels_desktop_version": {
                    "type": "string"
                },
                "required_claims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "required_roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "resources": {
                    "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.HostResourceItem"
                },
                "reverse_proxy": {
                    "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.HostReverseProxy"
                },
                "state": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.OrchestratorHostUpdateRequest": {
            "type": "object",
            "properties": {
                "authentication": {
                    "$ref": "#/definitions/models.OrchestratorAuthentication"
                },
                "description": {
                    "type": "string"
                },
                "host": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                },
                "prefix": {
                    "type": "string"
                },
                "schema": {
                    "type": "string"
                }
            }
        },
        "models.PackerTemplateResponse": {
            "type": "object",
            "properties": {
                "addons": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "defaults": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "internal": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "packer_folder": {
                    "type": "string"
                },
                "required_claims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "required_roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "specs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "updated_at": {
                    "type": "string"
                },
                "variables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "models.ParallelsDesktopLicense": {
            "type": "object",
            "properties": {
                "advanced_restrictions": {
                    "type": "string"
                },
                "cpu_total": {
                    "type": "integer"
                },
                "deferred_activation": {
                    "type": "string"
                },
                "edition": {
                    "type": "string"
                },
                "expiration": {
                    "type": "string"
                },
                "grace_period_ends_at": {
                    "type": "string"
                },
                "is_volume": {
                    "type": "string"
                },
                "main_period_ends_at": {
                    "type": "string"
                },
                "max_memory": {
                    "type": "integer"
                },
                "serial": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "models.PullCatalogManifestRequest": {
            "type": "object",
            "properties": {
                "architecture": {
                    "type": "string"
                },
                "catalog_id": {
                    "type": "string"
                },
                "client": {
                    "type": "string"
                },
                "connection": {
                    "type": "string"
                },
                "machine_name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "provider_metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "start_after_pull": {
                    "type": "boolean"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "models.PushCatalogManifestRequest": {
            "type": "object",
            "properties": {
                "architecture": {
                    "type": "string"
                },
                "catalog_id": {
                    "type": "string"
                },
                "connection": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "local_path": {
                    "type": "string"
                },
                "minimum_requirements": {
                    "$ref": "#/definitions/github_com_Parallels_prl-devops-service_catalog_models.MinimumSpecRequirement"
                },
                "pack_size": {
                    "type": "integer"
                },
                "required_claims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "required_roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "uuid": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "models.RegisterVirtualMachineRequest": {
            "type": "object",
            "properties": {
                "delay_applying_restrictions": {
                    "type": "boolean"
                },
                "force": {
                    "type": "boolean"
                },
                "machine_name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "regenerate_source_uuid": {
                    "type": "boolean"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "models.RemoteVirtualMachineProvider": {
            "type": "object",
            "properties": {
                "api_key": {
                    "type": "string"
                },
                "host": {
                    "type": "string"
                },
                "meta": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "password": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                }
            }
        },
        "models.RenameVirtualMachineRequest": {
            "type": "object",
            "properties": {
                "current_name": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "new_name": {
                    "type": "string"
                }
            }
        },
        "models.ReverseProxyHostCreateRequest": {
            "type": "object",
            "properties": {
                "cors": {
                    "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.ReverseProxyHostCors"
                },
                "host": {
                    "type": "string"
                },
                "http_routes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.ReverseProxyHostHttpRoute"
                    }
                },
                "port": {
                    "type": "string"
                },
                "tcp_route": {
                    "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.ReverseProxyHostTcpRoute"
                },
                "tls": {
                    "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.ReverseProxyHostTls"
                }
            }
        },
        "models.ReverseProxyHostHttpRouteCreateRequest": {
            "type": "object",
            "properties": {
                "path": {
                    "type": "string"
                },
                "pattern": {
                    "type": "string"
                },
                "request_headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "response_headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "schema": {
                    "type": "string"
                },
                "target_host": {
                    "type": "string"
                },
                "target_port": {
                    "type": "string"
                },
                "target_vm_id": {
                    "type": "string"
                }
            }
        },
        "models.ReverseProxyHostTcpRouteCreateRequest": {
            "type": "object",
            "properties": {
                "target_host": {
                    "type": "string"
                },
                "target_port": {
                    "type": "string"
                },
                "target_vm_id": {
                    "type": "string"
                }
            }
        },
        "models.ReverseProxyHostUpdateRequest": {
            "type": "object",
            "properties": {
                "cors": {
                    "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.ReverseProxyHostCors"
                },
                "host": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                },
                "tls": {
                    "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.ReverseProxyHostTls"
                }
            }
        },
        "models.RoleRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "models.RoleResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.ServiceHealthCheck": {
            "type": "object",
            "properties": {
                "error_message": {
                    "type": "string"
                },
                "healthy": {
                    "type": "boolean"
                },
                "message": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.SystemReverseProxy": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "host": {
                    "type": "string"
                },
                "hosts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_Parallels_prl-devops-service_models.ReverseProxyHost"
                    }
                },
                "port": {
                    "type": "string"
                }
            }
        },
        "models.SystemUsageItem": {
            "type": "object",
            "properties": {
                "disk_count": {
                    "type": "number"
                },
                "logical_cpu_count": {
                    "type": "integer"
                },
                "memory_size": {
                    "type": "number"
                },
                "physical_cpu_count": {
                    "type": "integer"
                }
            }
        },
        "models.SystemUsageResponse": {
            "type": "object",
            "properties": {
                "cpu_brand": {
                    "type": "string"
                },
                "cpu_type": {
                    "type": "string"
                },
                "devops_version": {
                    "type": "string"
                },
                "external_ip_address": {
                    "type": "string"
                },
                "is_reverse_proxy_enabled": {
                    "type": "boolean"
                },
                "os_name": {
                    "type": "string"
                },
                "os_version": {
                    "type": "string"
                },
                "parallels_desktop_licensed": {
                    "type": "boolean"
                },
                "parallels_desktop_version": {
                    "type": "string"
                },
                "reverse_proxy": {
                    "$ref": "#/definitions/models.SystemReverseProxy"
                },
                "system_reserved": {
                    "$ref": "#/definitions/models.SystemUsageItem"
                },
                "total": {
                    "$ref": "#/definitions/models.SystemUsageItem"
                },
                "total_available": {
                    "$ref": "#/definitions/models.SystemUsageItem"
                },
                "total_in_use": {
                    "$ref": "#/definitions/models.SystemUsageItem"
                },
                "total_reserved": {
                    "$ref": "#/definitions/models.SystemUsageItem"
                }
            }
        },
        "models.UninstallToolsRequest": {
            "type": "object",
            "properties": {
                "all": {
                    "type": "boolean"
                },
                "run_as": {
                    "type": "string"
                },
                "tools": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/models.UninstallToolsRequestItem"
                    }
                },
                "uninstall_dependencies": {
                    "type": "boolean"
                }
            }
        },
        "models.UninstallToolsRequestItem": {
            "type": "object",
            "properties": {
                "flags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "uninstall_dependencies": {
                    "type": "boolean"
                }
            }
        },
        "models.UnregisterVirtualMachineRequest": {
            "type": "object",
            "properties": {
                "clean_source_uuid": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                }
            }
        },
        "models.UserCreateRequest": {
            "type": "object",
            "properties": {
                "claims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "email": {
                    "type": "string"
                },
                "is_super_user": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.ValidateTokenRequest": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "models.ValidateTokenResponse": {
            "type": "object",
            "properties": {
                "valid": {
                    "type": "boolean"
                }
            }
        },
        "models.VirtualMachineCatalogManifestPatch": {
            "type": "object",
            "properties": {
                "connection": {
                    "type": "string"
                },
                "required_claims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "required_roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.VirtualMachineCloneCommandRequest": {
            "type": "object",
            "properties": {
                "clone_name": {
                    "type": "string"
                }
            }
        },
        "models.VirtualMachineCloneCommandResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "models.VirtualMachineConfigRequest": {
            "type": "object",
            "properties": {
                "operations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.VirtualMachineConfigRequestOperation"
                    }
                },
                "owner": {
                    "type": "string"
                }
            }
        },
        "models.VirtualMachineConfigRequestOperation": {
            "type": "object",
            "properties": {
                "error": {},
                "flags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "group": {
                    "type": "string"
                },
                "operation": {
                    "type": "string"
                },
                "options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.VirtualMachineConfigRequestOperationOption"
                    }
                },
                "owner": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "models.VirtualMachineConfigRequestOperationOption": {
            "type": "object",
            "properties": {
                "flag": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "models.VirtualMachineConfigResponse": {
            "type": "object",
            "properties": {
                "operations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.VirtualMachineConfigResponseOperation"
                    }
                }
            }
        },
        "models.VirtualMachineConfigResponseOperation": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "group": {
                    "type": "string"
                },
                "operation": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "models.VirtualMachineExecuteCommandRequest": {
            "type": "object",
            "properties": {
                "command": {
                    "type": "string"
                },
                "environment_variables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "script": {
                    "$ref": "#/definitions/models.VirtualMachineExecuteCommandScript"
                },
                "use_ssh": {
                    "type": "boolean"
                },
                "use_sudo": {
                    "type": "boolean"
                },
                "user": {
                    "type": "string"
                }
            }
        },
        "models.VirtualMachineExecuteCommandResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "exit_code": {
                    "type": "integer"
                },
                "stderr": {
                    "type": "string"
                },
                "stdout": {
                    "type": "string"
                }
            }
        },
        "models.VirtualMachineExecuteCommandScript": {
            "type": "object",
            "properties": {
                "parameters": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "remote_path": {
                    "type": "string"
                }
            }
        },
        "models.VirtualMachineOperationResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "operation": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "models.VirtualMachineStatusResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "ip_configured": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "models.VirtualMachineUploadRequest": {
            "type": "object",
            "properties": {
                "path": {
                    "type": "string"
                },
                "remote_path": {
                    "type": "string"
                }
            }
        },
        "models.VirtualMachineUploadResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "Type the api key in the input below.",
            "type": "apiKey",
            "name": "X-Api-Key",
            "in": "header"
        },
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.9.10",
	Host:             "",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "Parallels Desktop DevOps Service",
	Description:      "Parallels Desktop DevOps Service",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
